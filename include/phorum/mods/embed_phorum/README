Module  : Embedded Phorum
Version : 0.0.21
Author  : Maurice Makaay


This module implements functionality for creating an embedded version of
Phorum. Embedded means that Phorum will be the slave of a master system.
The master system is responsible for feeding the Phorum system with user
data and for processing page elements that are produced by Phorum. Since
Phorum is a slave application in this setup, things like signup,
authentication and settings are no longer handled by Phorum.


QUICK OVERVIEW OF HOW THIS MOD WORKS:
=====================================

Install and activate the embed_phorum module. Once you have enabled
the module, your Phorum will stop working at once through the normal
URL (except for the admin interface). 

Phorum now fully expects to be run from within a master application.
A single glue script is needed to run all Phorum code. A simple 
example glue script can be found in:

   connectors/stub_example/index.php

Important in the glue script is the creation of a PhorumConnector object,
which is put in $PHORUM_CONNECTOR. This is actually the most important
part for embedding Phorum into another application, because this class
describes how to fit Phorum in there. The connector for this example
glue script can be found in:

    connectors/stub_example/connector.php

After that, the glue script will have to include the worker script:

   run_phorum.php

This script will run Phorum, without directly displaying data. It will
gather all output, break it into nice page elements and then hand it over
to the PhorumConnector object. This object will have to transport the
page elements to the right places in the master application. The big
advantage of this, is that things like the HTML title, extra <head>
information and the meta-refresh that Phorum sometimes uses can all be
used by the master application.

The module will also disable registration and login from within Phorum.
What happens here is that instead the PhorumConnector class will be asked
if a user is logged in or not (through the get_user_id() method). If a user
is logged in, the connector can return the Phorum user_id of that user.
The embed_phorum module will then take care of letting Phorum know that
the user is logged in. Important here, is that the user must be available
in the Phorum user table, before returning the user_id. For synchronizing
users from the master system with Phorum, the code from the syncuser.php
script can be used.

For now, the best documentation to read on is probably the comments in
the source code. All code is verbosely documented, so it should be clear
what's going on in there. An important file to look at is the 
PhorumConnectorBase.php. This is the base class that you can use for
constructing your own connector classes. This base class contains a lot
of info about the available methods.


TEMPLATES:
==========

The mod_embed module needs a customized template set. In the templates
directory of the embed_phorum distribution, you will find two templates
that are ready for use with this mod. The templates are:

- embed_default  An embedded version of the default Phorum template
- embed_phorum   A totally tailored template for fitting Phorum into
                 small spaces (which is often the case when embedding).


Here's a description of the most important things that have to be changed
in a templateset to make it work for the embed_phorum module.


all templates
-------------

References to login / logout and register are removed from the templates.


header.tpl
----------

The following site element flags must be in the header.tpl, so the
embed_phorum module can parse the Phorum output into multiple page
elements. The entries with a *) must really be set. If you want the
template to be available for other embed_phorum connectors, then
implement all of the element flags in your template:

[mod_embed_phorum style]            The full <style> tag
[mod_embed_phorum base_href]        The full <base href="..."> tag
[mod_embed_phorum http_path]        Phorum's http_path setting
[mod_embed_phorum rss_link]         The full <link> for the RSS feed
[mod_embed_phorum rss_url]          The URL to the RSS feed
[mod_embed_phorum redirect_meta]    The full <meta> refresh tag (if needed)
[mod_embed_phorum redirect_url]     URL to redirect to in "redirect_time" secs
[mod_embed_phorum redirect_time]    The time after which to redirect the user
[mod_embed_phorum lang_meta]        The full <meta> language specification tag
[mod_embed_phorum title] *          The HTML title for the page
[mod_embed_phorum head_data]        Additional <head> data
[mod_embed_phorum body_onload]      Javascript code to execute for body onload
[mod_embed_phorum body_data] *      The body of the page

The header.tpl is changed so that there's no starting HTML code in it.
So all references to <html>/<head>/<title>/<body> are absent. The page
elements must provide the master application with usable parts and the
master application has to build a webpage out of that. So body_data will
only contain the information is withing <body> in the default templates.


footer.tpl
----------

Ending HTML code like </body> and </html> is removed from this template.


login.tpl
---------

This one should only show a message that the user should login.
Logging in is not handled by the embedded Phorum, so a loginform
is useless.


register.tpl
------------

This one should only show a message that the user should register.
Registering is not handled by the embedded Phorum, so a registration
form is useless.


cc_menu.tpl
cc_usersettings.tpl 
-------------------

Fully remove the ChangePassword feature. Phorum does not handle user
registration and authentication at all.

Implement dynamic displaying of fields based on the  get_slave_fields()
method of the connector. Those fields will be put in {ALLOW_CHANGE->fieldname}.
Only the fields that Phorum may change should be displayed.

A little extra:
---------------

Not needed for most people, but if you like to shuffle with the 
control center pages, you might need this.

The embed_phorum module also implements a feature that takes care of handling
checkboxes, even if they aren't on the expected control center panel. 
The embed_phorum template that is included in the embed_phorum module
package, uses this feature to have the user settings pages layed out
differently. To have a checkbox handled, simply add a hidden field
like this:

  <input type="hidden" name="checkbox[<fieldname>]" value="<+ or ->" />

Giving this parameter value="+" means that the description matches the
actual checkbox value in the database. value="-" can be used for those
cases where the description that is displayed to the user is the reverse
of what the checkbox does (e.g. "Allow other users to see my email address"
is stored as "hide_email" in the database).

